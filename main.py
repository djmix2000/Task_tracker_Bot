from asyncio import timeout
import pytz

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue

from cloudflare_workers_ai import CloudflareWorkersAi
from model import Task
from typing import Dict, List
from save_json import SaveJsonDB
from datetime import datetime
from random import randint

from —Åonfig import Config
import asyncio

config = Config()
db = SaveJsonDB(config.get_url_DB(),timeout=10)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Task Tracker Bot üìù\n\n–ö–æ–º–∞–Ω–¥—ã:\n/add <–∑–∞–¥–∞—á–∞>\n/list\n/done <–Ω–æ–º–µ—Ä>\n/clear"
    )

# /add <–∑–∞–¥–∞—á–∞>
async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    id = randint(0,10000)
    task_text = " ".join(context.args)

    if not task_text:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")
        return

    task = Task(id= id,title=task_text,status='Open')
    cloudflare_ai = CloudflareWorkersAi(task=task,ai_agent=config.get_ai_agent(),timeout=10)
    task = cloudflare_ai.send_task_ai()
    task = db.create_task(task)
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task.title}")

# /list
async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = db.load_tasks()

    if not tasks:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        msg = "\n".join(
            [f"{task.id}. –ó–∞–¥–∞—á–∞:{task.title} –°—Ç–∞—Ç—É—Å:{task.status})"
             for task in tasks]
        )
        await update.message.reply_text(f"üìù–ó–∞–¥–∞—á–∏:\n{msg}")

# /done <–Ω–æ–º–µ—Ä>
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.args or not context.args[0].isdigit():
            await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /done 2")
            return
        task = db.get_task(id=context.args[0])
        task.status = 'Closed'
        task = db.update_task_id(id=context.args[0],task=task)
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task.title}")
    except:
        await update.message.reply_text("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –∑–∞–¥–∞—á–∏.")

# /clear
async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.args or not context.args[0].isdigit():
            await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /clear 2")
            return
        task = db.delete_task_id(context.args[0])
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ ‚Ññ{task.id} —É–¥–∞–ª–µ–Ω–∞: {task.title}")
    except:
        await update.message.reply_text("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –∑–∞–¥–∞—á–∏.")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token("8243876048:AAF4xx2RoR-Wxx0j4u7gvIob3qvxonylthI").build()
    app.job_queue.scheduler.configure(timezone=pytz.UTC)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("list", list_tasks))
    app.add_handler(CommandHandler("done", done))
    app.add_handler(CommandHandler("clear", clear))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    import nest_asyncio

    nest_asyncio.apply()  # üí° –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π event loop
    asyncio.run(main())
